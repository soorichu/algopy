1. 근사 알고리즘
* 튜링 기계 = 테이프, 기호, 헤드, 상태, 규칙
  - 주어진 입력과 알고리즘으로 동작하는 컴퓨터
  (1) 결정론적 튜링기계(순차처리 컴퓨터) - 테이프의 위치를 바꾸거나 쓰인 기호를 바꿀 때 한 가지 상태로만 변경 가능
  (2) 비결정론적 튜링기계(병렬처리 컴퓨터) - 하나 이상의 상태로 바뀔 수 있거나 혹은 바뀔 상태가 없을 수 있음. 연산 결과가 상황에 따라 달라질 수 있는 연산을 수행
* 다항 시간 알고리즘 (<-> 지수시간 알고리즘)
  - 알고리즘 수행시간이 입력 크기에 대한 다항식의 표현
  - O(1), O(logn), O(n), O(nlogn), O(n), O(n^2), O(n^k)
* 문제의 난의도
  (1) 쉬운 문제 - 결정론적 튜링기계를 이용한 다항시간 알고리즘이 존재
  (2) 어려운 문제 - 결정론적 튜링기계를 이용한 다항시간 알고리즘의 존재 여부를 알 수 없는 문제
* 문제 형태에 따른 분류
  (1) 판정 문제 - 예/아니오
  (2) 최적화 문제 - 최솟값 또는 최댓값을 구하는 형태의 문제
* 클래스
  (1) 클래스 P - 결정론적 튜링기계를 이용하여 다항 시간에 해결할 수 있는 모든 판정 문제의 집합. 쉬운문제의 판정문제 버전
  (2) 클래스 NP - 비결정론적 튜링기계를 이용하여 다항 시간에 해결할 수 있는 모든 판정 문제의 집합. 최단경로문제의 판정문제 버전. 외판원 문제
  - 클래스 P와 클래스 NP의 관계 : P < NP, (P != NP ?) 
* 변환
  - 문제 A가 문제 B로 변환(reduction)된다.
  - 문제 A의 입력과 출력을 문제 B의 입력과 출력 형태로 바꿀 수 있고, 여기에 문제 B를 해결하는 알고리즘을 적용함으로써 궁극적으로 문제 A로 풀 수 있다.
  - 다항식 시간 변환 -> 입력과 출력의 형태를 바꾸는데 다항 시간이 소요
  - abc와 aac의 편집 거리는? 

2. NP-완전문제
* 완전 문제 
  - 어떤 부류에 속하는 모든 문제가 그 부류에 속하는 어떤 문제 P로 다항시간 변환이 가능
  - 해당부류에서 가장 어려운 문제. 해당부류의 모든 문제를 대표하는 문제
* NP-완전문제
  - 클래스 NP에 속하는 문제가 주어진 문제 A로 다항식 시간 변환되고, 문제 A가 클래스 NP에 속하는 경우
* 하드 문제
  - 어떤 부류에 속하는 모든 문제가 어떤 문제 R로 다항식 시간 변환이 가능할 때,
    문제 R이 해당 부류에 속한다는 조건이 없는 경우 하드문제, 조건이 있는 경우 완전문제
  - 해당 부류에 속하는 어떤 문제보다 풀기 어렵거나 비슷한 정도로 풀기 어려운 문제
* NP-하드 문제
  - 클래스 NP에 속하는 모든 문제가 주어진 어떤 문제 A로 다항식 시간에 변환되는 경우, 문제 A를 NP-하드 문제라고 함.
  - NP-완전문제는 NP-하드문제의 진부분집합
* NP-완전문제의 종류
  (1) 외판원 문제
	- 여러 도시와 도시 간의 이동에 필요한 비용이 주어진 경우, 비용 R 이하로 모든 도시를 한번씩만 방문하고 처음 도시로 돌아오는 방법이 존재하는지 판정하는 방법
	(해결) 최소신장트리 + 깊이우선탐색
	 ㄱ. 주어진 그래프의 최소신장트리 구한다.
	 ㄴ. 임의의 정점 하나를 루트 노드로 지정해서 최소신장트리를 깊이우선탐색 순서대로 정점을 나열하고 마지막에 첫 정점을 한번 더 추가한다.
	- 성능 = O(|V|^2)
	- 특징 : 근사 알고리즘으 찾은 근사해는 최적해의 두배를 넘지 않는다. 최소신장트리의 가중치는 최적해보다 작거나 같다. 근사해는 최소신장트리의 가중치의 두 배를 넘지 않는다. 따라서 근사해는 가중치의 두 배를 넘지 않는다.

  (2) 0/1 배낭문제
  	- 배낭의 용량을 초과하지 않고 물체를 쪼갤 수 없다.(문제를 쪼갤 수 있다면 욕심쟁이 방법)
  (3) CNF 만족성 문제
  	- 정규곱형으로 주어진 논리식의 리터럴들에 참 또는 거짓 값을 적절히 지정하여 전체 논리식의 값을 참으로 만들 수 있는지를 판정하는 문제
  (4) 해밀토니언 사이클 문제
  	- 무방향 그래프 G가 주어졌을 때, G의 모든 정점을 한번씩만 지나가는 사이클이 존재하는지 판정하는 문제
  (5) 궤 채우기 문제
  	- 용량이 1인 무한개의 궤와 다양한 크기의 개체가 n개 주어진 경우, R개의 궤로 n개의 개체를 전부 수용할 수 있는지 판정하는 문제
  	(해결)
  	 ㄱ. 최초법 - 사용된 궤 중에서 선택한 물체를 넣을 수 있는지 최초의 궤에 넣는다.
  	 ㄴ. 최선법 - 현재 물체를 넣었을 때 남는 부분이 가장 작게 되는 궤에 넣는다.
  	 ㄷ. 감소순 최초법 - 물체를 크기의 감소순으로 정렬 -> 최초법
  	 ㄹ. 감소순 최선법 - 물체의 크기의 감소순으로 정렬 -> 최선법
  	- 성능 이중루프, 정렬 - O(n^2)
  	- 네 가지 방법 모두 최적해를 찾는 것을 보장하지 못함
  	- 최선/최초법은 최적해의 2배를 넘지 않고, 감소순 최초/최선법은 최적해의 1.5배를 넘지 않음
  (6) 파티션 문제
    - n개의 양의 정수가 주어졌을 때 각 집합에 포함된 수의 합이 동일하도록 n개의 양의 정수를 두 개의 집합으로 나눌 수 있는지 판정하는 문제
  (7) 클리크 판정문제
    - 그래프 G와 정수 K가 주어졌을 때, G가 크기 K인 클리크를 갖는지 여부를 판정하는 문제
    - K개의 정점으로 완전그래프(모든 정점 사이에 간선이 존재)가 되는 G의 부분 그래프
  (8) 버텍스 커버 문제
    - 그래프 G와 정수 K가 주어졌을 떄, G가 크기 K인 버텍스 커버를 갖는지 여부를 판정하는 문제
    - 버텍스 커버 : 모든 간선이 최소한 하나 이상의 정점을 부수하는 정점의 부분집합
    - 버텍스 커버의 크기 : 버텍스 커버를 구성하는 정점의 개수
    (해결)
     ㄱ. 그래프에서 임의의 간선을 선택하여 이와 맞닿은 두 정점을 모두 버텍스 커버에 포함시키고
     ㄴ. 두 정점에 부수된 모든 간선을 그래프에서 제거
    - 성능 : O(|E|)
    - 특징 : 근사해는 최적해의 두 배를 넘지 않는다. 
* NP-완전성의 증명
  (1) 알려진 하나의 NP-완전 문제가 해당 문제로 다항식 시간 변환됨을 보인다.
  (2) 해당문제를 푸는 비결정론적 튜링기계가 존재함을 보인다.

3. 근사 알고리즘
  - 최적화 문제에 대해서 최적해에 가까운 해를 구하는 다항 시간 알고리즘
  - 근사해(가능해) : 근사알고리즘이 생성하는 해. 반드시 최적이 아니어도 됨. 요구되는 규칙을 위반하지 않는 해
  - 최적해를 구할 수 없거나 빠른 시간에 대략적인 해를 찾는 경우에 이용


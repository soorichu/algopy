해 탐색 알고리즘

1. 되추적 기법 backtracking
  - 상태 공간 트리에서 해를 찾아다니다가 앞쪽에 더 이상 해가 없으면 왔던 길을 되돌아가서 다른 길을 찾아보는 방법
  * 상태공간트리 state space tree
    - 문제의 해를 만들어 가는 공간을 트리 형태로 나타낸 것
    - 주어진 입력으로 만들어 낼 수 있는 모든 후보해를 리프 노드로 갖는 트리
    -> 루트 노드는 출발점. 각 리프 노드는 각 후보해
    - 루트노드로부터 리프노드까지 경로는 하나의 후보해를 만들어 가는 과정
  - 출발점으로부터 깊이 우선탐색으로 트리를 순회
    - 앞쪽(자식노드)로 갈 때는 항상 해의 존재 가능성 확인 -> 해가 있을 수 없다면 더 이상 나가지 않고 다른 자식 노드로 방향을 바꿈
  (과정)
    가. 루트노드를 현위치노드로 지정
    나. 현위치 노드의 각 자식 노드에 대해 다음 과정반본
      ㄱ. 자식 노드 방향으로 해가 있을 수 없다면 가로 돌아가서 다음 자식 노드에서 진행
      ㄴ. 자식 노드에 해가 있는지 확인한 후 있다면 해를 출력
      ㄷ. 자식 노드를 현 위치 노드로 지정한 후 나로 간다.(깊이우선탐색)
    다. 부모 노드를 현위치 노드로 지정한 후 나로 돌아가서 다음 자식 노드에 대해서 진행

   (문제) 저울문제
    - 양팔 저울과 1~n번까지 추가 있고 각 추 i의 무게를  wi라고 가정할 때, 무게 M인 물체가 주어지면 이를 양팔 저울로 달 수 있는 지 판정하는 문제
    - n개의 추 중에서 추의 무게의 합이 M이 되도록 선택할 수 있는지 판정
    - 추는 한쪽 팔에만 올릴 수 있다.
    - 자식 노드 방향으로 해가 있을 수 있는지 확인하기 위한 정보
    - Ssum - 현재까지 선택한 추들의 무게의 합
    - Rsum - 앞으로 고려할 추들의 무게의 합
    - 자식노드의 Ssum > M -> 이미 너무 많은 추를 선택한 것으로 그 방향으로의 더 이상의 탐색은 불필요
    - 자식노드의 Ssum + 자식노드의 Rsum < M -> 나머지 추를 모두 선택해도 M이 될 수 없으므로 그 방향으로의 더 이상의 탐색은 불필요
    
